type
  MyType = record
    T: array[5] of record
      P, Q: Boolean;
    end;
  end;

var
  J, K: Integer;
  D: Char;
  B: Byte;

  C: array[10] of Char;
  I: array[10] of Array[10] of Integer; 

  M: MyType;

  R: record
    X: Integer;
    Y, Z: Char;
    A: array[10] of Byte;
    S: MyType;
    U: Char;
  end;

  Filler: Byte;

  A: Integer;

begin
  ! '@D='; ! Addr(D);
  ! '@I='; ! Addr(I);
  ! '@C='; ! Addr(C);
  ! '@J='; ! Addr(J);
  ! '@K='; ! Addr(K);
  ! '@R='; ! Addr(R);

  ! '@R.X='; ! Addr(R.X);
  ! '@R.Y='; ! Addr(R.Y);
  ! '@R.Z='; ! Addr(R.Z);
  ! '@R.A='; ! Addr(R.A);
  ! '@R.S.T[2]='; ! Addr(R.S.T[2]);
  ! '@R.S.T[3]='; ! Addr(R.S.T[3]);

  ! '@R.U='; ! Addr(R.U);

  ! '@A='; ! Addr(A);

  ! I[0][0];
  ! I[9][9];

  I[5][5] := 100;
  ! I[5][5];

  C[0] := 'A';
  !C[0];

  for J := 0 to 9 do
    for K := 0 to 9 do
      I[J][K] := 10 * J + K;

  for J := 9 downto 0 do
    for K := 9 downto 0 do
      ! I[J][K];

  for J := 5 to 0 do
    ! 'You should not see this.';

  for J := 0 downto 5 do
    ! 'You should not see this.';

  for J := 3 to 3 do
    ! 'Should see this once';

  for J := 3 downto 3 do
    ! 'Should see this once, too';

  for I[3][6] := 1 to 10 do
    ! I[3][6];

  R.X := 42;
  ! R.X;

  R.Y := 'a';
  ! R.Y;

  R.Z := R.Y;
  ! R.Z;

  R.S.T[3].P := true;
  ! R.S.T[3].P;

  A := Addr(D);

  D := 'A';
  ! D;
  ! Mem[A];

  D := 'B';
  ! D;
  ! Mem[A];

  D := 'C';
  ! D;
  ! Mem[A];

  A := Addr(R.U);

  R.U := 'A';
  ! R.U;
  ! Mem[A];

  R.U := 'B';
  ! R.U;
  ! Mem[A];

  R.U := 'C';
  ! R.U;
  ! Mem[A];

  Assert(true);

  Assert(false);

end.