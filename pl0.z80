;
; PL0 built-in assembler functions
;

#if defined(CPM)
                org     $100
#endif

#if defined(NXT)
                org     $2000
#endif

                jp      main

;
; Some stuff shared between the routines
;
#if defined(CPM)
__buffer:       ds      32
#endif

#if defined(NXT)
__saved_iy:     dw      0
__win_handle:   dw      0
__buffer:       equ     23698
#endif

;
; Signed 16 bit '=' check (with help from Ped7g)
;
; In:   HL (left), DE (right)
; Out:  A=0 if false, A=1 if true
;
__int16_eq:     xor a
                sbc hl,de
                ; add hl,de
                ret nz
                inc a
                ret

;
; Signed 16 bit '<>' check (with help from Ped7g)
;
; In:   HL (left), DE (right)
; Out:  A=0 if false, A=1 if true
;
__int16_neq:    xor a
                sbc hl,de
                ; add hl,de
                ret z
                inc a
                ret

;
; Signed 16 bit 'lt' check (with help from Ped7g)
;
; In:   HL (left), DE (right)
; Out:  A=0 if false, A=1 if true
;
__int16_lt:     xor a
                sbc hl,de
                ; add hl,de
                jp pe,__int16_lt_of
                ret p
                inc a
                ret
__int16_lt_of:  ret m
                inc a
                ret

;
; Signed 16 bit '>=' check (with help from Ped7g)
;
; In:   HL (left), DE (right)
; Out:  A=0 if false, A=1 if true
;
__int16_geq:    xor a
                sbc hl,de
                ; add hl,de
                jp pe,__int16_geq_of
                ret m
                inc a
                ret
__int16_geq_of: ret p
                inc a
                ret

;
; Signed 16 bit multiplication (taken from Leventhal/Saville)
;
; Entry:  HL (multiplicand), DE (multiplier)
; Exit:   HL (product)
; Uses:   AF, BC
;
__mul16:        ld      c,l
                ld      b,h
                ld      hl,0
                ld      a,15
__mul16a:       sla     e
                rl      d
                jr      nc,__mul16b
                add     hl,bc
__mul16b:       add     hl,hl
                dec     a
                jr      nz,__mul16a
                or      d
                ret     p
                add     hl,bc
                ret

;
; Signed 16 bit division (taken from Leventhal/Saville)
;
; Entry:  HL (dividend), DE (divisior)
; Exit:   HL (quotient), DE (remainder), CF (div-by-zero)
; Uses:   AF, BC
;
__sdiv16:       ld      a,h
                ld      (__srem),a
                xor     d
                ld      (__squot),a
                ld      a,d
                or      a
                jp      p,__chkde
                sub     a
                sub     e
                ld      e,a
                sbc     a,a
                sub     d
                ld      d,a
__chkde:        ld      a,h
                or      a
                jp      p,__dodiv
                sub     a
                sub     l
                ld      l,a
                sbc     a,a
                sub     h
                ld      h,a
__dodiv:        call    __udiv16
                ret     c
                ld      a,(__squot)
                or      a
                jp      p,__dorem
                sub     a
                sub     l
                ld      l,a
                sbc     a,a
                sub     h
                ld      h,a
__dorem:        ld      a,(__srem)
                or      a
                ret     p
                sub     a
                sub     e
                ld      e,a
                sbc     a,a
                sub     d
                ld      d,a
                ret
__udiv16:       ld      a,e
                or      d
                jr      nz,__divide
                ld      hl,0
                ld      d,h
                ld      e,l
                scf
                ret
__divide:       ld      c,l
                ld      a,h
                ld      hl,0
                ld      b,16
                or      a
__dvloop:       rl      c
                rla
                rl      l
                rl      h
                push    hl
                sbc     hl,de
                ccf
                jr      c,__drop
                ex      (sp),hl
__drop:         inc     sp
                inc     sp
                djnz    __dvloop
                ex      de,hl
                rl      c
                ld      l,c
                rla
                ld      h,a
                or      a
                ret

__squot:        ds      1
__srem:         ds      1
__count:        ds      1

;
; Multiplication by 10
;
; Entry:  HL (multiplicand)
; Exit:   HL (product)
; Uses:   DE
;
__mul10:    
                ex      hl,de
                add     hl,hl
                ld      de,hl
                add     hl,hl
                add     hl,hl
                add     hl,de
                ex      hl,de
                ret

;
; Division by 10 (taken from Z80 Heaven)
;
; Entry:  HL (dividend)
; Exit:   HL (quotient), A (remainder)
; Uses:   AF, BC
;
__div10:    
                ld      bc,$0D0A
                xor     a
                add     hl,hl
                rla
                add     hl,hl
                rla
                add     hl,hl
                rla
__div10a:       add     hl,hl
                rla
                cp      c
                jr c,   __div10b
                sub c
                inc l
__div10b:       djnz __div10a
                ret

;
;
;
;

__random:
    ; ex hl,de
    call __rand16
    call __sdiv16
    ex hl,de
    ret
    
;#define smc    ;uncomment if you are using SMC
__rand16:
;;collaboration by Zeda with Runer112
;;160cc or 148cc if using SMC
;;26 bytes
;;cycle: 4,294,901,760 (almost 4.3 billion)
#if defined(smc)
seed1=$+1
    ld hl,9999
#else
    ld hl,(seed1)
#endif
    ld b,h
    ld c,l
    add hl,hl
    add hl,hl
    inc l
    add hl,bc
    ld (seed1),hl
#if defined(smc)
seed2=$+1
    ld hl,9999
#else
    ld hl,(seed2)
#endif
    add hl,hl
    sbc a,a
    and %00101101
    xor l
    ld l,a
    ld (seed2),hl
    add hl,bc
    res 7,h
    ret
seed1:              dw 1234
seed2:              dw 5678

; String Compare Leventhal Saville P.290
;
; HL string 1
; DE string 2
; Result: Z=1, C=0 1<2
; Z =0, C=0 1>2
; Z=0, C=1 1<2


__strcmp:
        ld      a,(hl)
        ld      (__lens1),a
        ld      a,(de)
        ld      (__lens2),a
        cp      (hl)
        jr      c,__begcmp
        ld      a,(hl)
__begcmp:
        or      a
        jr      z,__cmplen
        ld      b,a
        ex      de,hl
__cmplp:
        inc     hl
        inc     de
        ld      a,(de)
        cp      (hl)
        ret     nz
        djnz    __cmplp
__cmplen:
        ld      a,(__lens1)
        ld      hl,__lens2
        cp      (hl)
        ret
__lens1:
        ds      1
__lens2:
        ds      1

; String concatenate
; HL = String 1, DE = String 2, B = max len, CF=1 if shortened
__strcat:
        ld      (__s1adr),hl
        push    bc
        ld      a,(hl)
        ld      (__s1len),a
        ld      c,a
        ld      b,0
        add     hl,bc
        inc     hl
        ld      a,(de)
        ld      (__s2len),A
        inc     de
        pop     bc
        ld      c,a
        ld      a,(__s1len)
        add     a,c
        jr      c,__toolng
        cp      b
        jr      z,__lenok
        jr      c,__lenok
__toolng:
        ld      a,255
        ld      (__strgov),a
        ld      a,(__s1len)
        ld      c,a
        ld      a,b
        sub     c
        ret     c
        ld      (__s2len),a
        ld      a,b
        ld      (__s1len),a
        jr      __docat
__lenok:
        ld      (__s1len),a
        sub     a
        ld      (__strgov),a
__docat:
        ld      a,(__s2len)
        or      a
        jr      z,__exit
        ld      c,a
        ld      b,0
        ex      de,hl
        ldir
__exit:
        ld      a,(__s1len)
        ld      hl,(__s1adr)
        ld      (hl),a
        ld      a,(__strgov)
        rra
        ret
__s1adr:
        ds      2
__s1len:
        ds      1
__s2len:
        ds      1
__strgov:
        ds      1

; String pos
__strpos:
        ld      (__string),hl
        ex      de,hl
        ld      a,(hl)
        or      a
        jr      z,__notfnd
        inc     hl
        ld      (__substg),hl
        ld      (__sublen),a
        ld      c,a
        ld      a,(de)
        or      a
        jr      z,__notfnd
        sub     c
        jr      c,__notfnd
        inc     a
        ld      b,a
        sub     a
        ld      (__index),a
__slp1:
        ld      hl,__index
        inc     (hl)
        ld      hl,__sublen
        ld      c,(hl)
        ld      hl,(__string)
        inc     hl
        ld      (__string),hl
        ld      de,(__substg)
__cmplp2:
        ld      a,(de)
        cp      (hl)
        jr      nz,__slp2
        dec     c
        jr      z,__found
        inc     hl
        inc     de
        jr      __cmplp2
__slp2:
        djnz    __slp1
        jr      __notfnd
__found:
        ld      a,(__index)
        ret
__notfnd:
        sub     a
        ret
__string:
        ds      2
__substg:
        ds      2
__slen:
        ds      1
__sublen:
        ds      1
__index:
        ds      1


; strcpy
__strcpy:
        ld      (__maxlen),a
        sub     a
        ld      (de),a
        ld      (__cpyerr),a
        or      b
        ret     z
        ld      a,(__maxlen)
        or      a
        jr      z,__erexit
        ld      a,c
        or      a
        jr      z,__erexit
        ld      a,(hl)
        cp      c
        ret     c
        ld      a,c
        add     a,b
        jr      c,__recalc
        dec     a
        cp      (hl)
        jr      c,__cnt1ok
        jr      z,__cnt1ok
__recalc:
        ld      a,255
        ld      (__cpyerr),a
        ld      a,(hl)
        sub     c
        inc     a
        ld      b,a
__cnt1ok:
        ld      a,(__maxlen)
        cp      b
        jr      nc,__cnt2ok
        ld      b,a
        ld      a,255
        ld      (__cpyerr),a
__cnt2ok:
        ld      a,b
        or      a
        jr      z,__erexit
        ld      b,0
        add     hl,bc
        ld      (de),a
        ld      c,a
        inc     de
        ldir
        ld      a,(__cpyerr)
__okexit:
        or      a
        ret     z
__erexit:
        scf
        ret
__maxlen:
        ds      1
__cpyerr:
        ds      1

;Insert
__strins:
        sub     a
        ld      (__inserr),a
        ld      a,(de)
        or      a
        ret     z
__idx0:
        ld      a,c
        or      a
        scf
        ret     z
__chklen:
        ld      a,(de)
        add     a,(hl)
        jr      c,__trunc
        cp      b
        ld      a,(de)
        jr      c,__idxlen
        jr      z,__idxlen
__trunc:
        ld      a,255
        ld      (__inserr),a
        ld      a,b
        sub     (hl)
        ret     c
        scf
        ret     z
__idxlen:
        ld      b,a
        ld      a,(hl)
        cp      c
        jr      nc,__lenok2
        ld      c,a
        add     a,b
        ld      (hl),a
        ex      de,hl
        ld      a,c
        inc     a
        add     a,e
        ld      e,a
        jr      nc,__idxl1
        inc     d
__idxl1:
        ld      a,255
        ld      (__inserr),a
        jr      __mvesub
__lenok2:
        push    bc
        push    de
        ld      e,a
        ld      d,0
        add     a,b
        ld      (hl),a
        ld      a,e
        sub     c
        inc     a
        add     hl,de
        ld      e,l
        ld      d,h
        ld      c,b
        ld      b,0
        add     hl,bc
        ex      de,hl
        ld      c,a
        lddr
        ex      de,hl
        inc     de
        pop     hl
        pop     bc
__mvesub:
        inc     hl
        ld      c,b
        ld      b,0
        ldir
        ld      a,(__inserr)
        rra
        ret
__inserr:
        ds      1

; Delete
__strdel:
        sub     a
        ld      (__delerr),a
        or      b
        ret     z
        ld      a,c
        or      a
        scf
        ret     z
        ld      a,(hl)
        cp      c
        ret     c
        ld      a,c
        add     a,b
        jr      c,__trunc2
        ld      e,a
        dec     a
        cp      (hl)
        jr      c,__cntok
        jr      z,__trunc2
        ld      a,255
        ld      (__delerr),a
__trunc2:
        ld      a,c
        dec     a
        ld      (hl),a
        ld      a,(__delerr)
        rra
        ret
__cntok:
        ld      a,(hl)
        ld      d,a
        sub     b
        ld      (hl),a
        ld      a,d
        sub     e
        inc     a
        push    hl
        ld      b,0
        add     hl,bc
        ex      (sp),hl
        ld      d,0
        add     hl,de
        pop     de
        ld      c,a
        ldir
__okexit2:
        or      a
        ret
__delerr:
        ds      1        
;
; String "equal" check. Arguments and result on stack.
;
; Entry:    -
; Exit:     -
; Uses:     HL,DE,BC,AF
;
__streq:
        ld      hl,258
        add     hl,sp
        ld      de,hl
        dec     h
        ld      a,(de)
        cp      (hl)
        jr      nz,__streq0     ; Fast track if lengths differ
        call    __strcmp
        jr      z,__streq1
__streq0:
        ld      de,0
;        ld      (hl),de
        ret
__streq1:
        ld      de,1
;        ld      (hl),de
;        ld      a,1
        ret

;
; String "less than" check. Arguments and result on stack.
;
; Entry:    -
; Exit:     -
; Uses:     HL,DE,BC,AF
;
__strlt:
        ld      hl,258
        add     hl,sp
        ld      de,hl
        dec     d
        call    __strcmp
        jr      c,__strlt1
__strlt0:
;        ld      a,0
        ld      de,0
;        ld      (hl),de
        ret
__strlt1:
        ld      de,1
;        ld      (hl),de
;        ld      a,1
        ret

;
; String "less than or equal" check. Arguments and result on stack.
;
; Entry:    -
; Exit:     -
; Uses:     HL,DE,BC,AF
;
__strleq:
        ld      hl,258
        add     hl,sp
        ld      de,hl
        dec     d
        call    __strcmp
        jr      z,__strleq1
        jr      c,__strleq1
__strleq0:
        ld      de,0
;        ld      (hl),de
;        ld      a,0
        ret
__strleq1:
        ld      de,1
;        ld      (hl),de
;        ld      a,1
        ret

; Concat
__concat:
        ld      hl,514
        add     hl,sp
        ld      (hl),0
        ld      de,hl
        dec     d
        push    hl
        push    de
        ld      b,255
        call    __strcat
        pop     de
        dec     d
        pop     hl
        ld      b,255
        call    __strcat
        ret

; Concat
__stradd:
        ld      hl,258
        add     hl,sp
        ld      de,hl
        dec     d
        ld      b,255
        call    __strcat
        ret

__pos:
        ld      hl,514
        add     hl,sp
        push    hl
        dec     h
        ld      de,hl
        dec     d
        ex      de,hl
        call    __strpos
        pop     hl
        ld      (hl),a
        inc     hl
        ld      (hl),0
        ret

__copy:
        ld      hl,2
        add     hl,sp
        ld      b,(hl)
        inc     hl
        inc     hl
        ld      c,(hl)
        inc     hl
        inc     hl
        ld      de,hl
        inc     d
        ld      a,255
        call    __strcpy
        ret

__insert:
        ld      hl,2
        add     hl,sp
        ld      c,(hl)
        inc     hl
        inc     hl
        ld      a,(hl)
        inc     hl
        ld      de,hl
        ld      h,(hl)
        ld      l,a
        inc     de

        ld      b,255
        call    __strins
        ret

__delete:
        ld      hl,2
        add     hl,sp
        ld      b,(hl)
        inc     hl
        inc     hl
        ld      c,(hl)
        inc     hl
        inc     hl
        ld      a,(hl)
        inc     hl
        ld      h,(hl)
        ld      l,a
        call    __strdel
        ret
;
; String length. Arguments and result on stack.
;
; Entry:    -
; Exit:     -
; Uses:     HL,DE
;
__length:
        ld      hl,2
        add     hl,sp
        ld      d,0
        ld      e,(hl)
        inc     h
        ld      (hl),de
        ret


#include "math48.z80"

.macro __constfp %xx,%yy,%zz
        ld      bc,%xx
        ld      de,%yy
        ld      hl,%zz
.endm

.macro constfp %x
        ld      hl,%x
        call    __atof
.endm

.macro pushfp
        push    bc
        push    de
        push    hl
.endm

.macro popfp
        pop     hl
        pop     de
        pop     bc
.endm

; Load FP at address HL into BCDEHL
__loadfp:
        push    ix
        push    hl
        pop     ix
        ld      l,(ix+0)
        ld      h,(ix+1)
        ld      e,(ix+2)
        ld      d,(ix+3)
        ld      c,(ix+4)
        ld      b,(ix+5)
        pop     ix
        ret

; Store FP into BCDEHL into address HL
__storefp:
        push    ix
        push    hl
        pop     ix
        exx
        ld      (ix+0),l
        ld      (ix+1),h
        ld      (ix+2),e
        ld      (ix+3),d
        ld      (ix+4),c
        ld      (ix+5),b
        pop     ix
        ret

__flteq:
        call    CMP
        jr      z,__flteq1
__flteq0:
        ld      de,0
        ret
__flteq1:
        ld      de,1
        ret

__fltneq:
        call    CMP
        jr      nz,__fltneq1
__fltneq0:
        ld      de,0
        ret
__fltneq1:
        ld      de,1
        ret

__fltlt:
        call    CMP
        jr      c,__fltlt1
__fltlt0:
        ld      de,0
        ret
__fltlt1:
        ld      de,1
        ret

__fltleq:
        call    CMP
        jr      c,__fltleq1
        jr      z,__fltleq1
__fltleq0:
        ld      de,0
        ret
__fltleq1:
        ld      de,1
        ret

__atof:
        push    ix
        ld      de,hl
        ld      ix,de
        inc     ix
        call    CNVN
        pop     ix
        ret

__ftoa:
        push    ix
        ld      ix,__ftoatmp + 1
        exx
        ld      hl,$0a0d
        exx
        call    FSTRR
        jr      nc,__ftoaok
        ld      hl,__ftoaerr
        pop     ix
        ret
__ftoaok:
        ld      ix,__ftoatmp
        ld      b,255
__ftoalp:
        inc     ix
        inc     b
        ld      a,(ix)
        cp      0
        jr      nz, __ftoalp
        ld      a,b
        ld      (__ftoatmp),a
        ld      hl,__ftoatmp
        pop     ix
        ret
__ftoatmp:
        db 31,  "                                "
__ftoaerr:
        db      5,"ERROR"

__putf:
        call __ftoa
        call __puts
        ret
;
; Print character to screen
;
; Entry:  A (ASCII code)
; Exit:   -
; Uses:   C,E,IY
;
#if defined(CPM)
__putc:
                ld      e,a
                ld      c,2
                call    5
                ret
#endif

#if defined(NXT)
__putc:
                ld      iy,(__saved_iy)
                rst     16
                ret
#endif

;
; Print string to screen
;
; Entry:  HL (string address)
; Exit:   -
; Uses:   AF,BC
;
__puts:         ld      b,(hl)
                inc     b
                jr      __putschk
__putsloop:     ld      a,(hl)
                push    hl
                push    bc
                call    __putc
                pop     bc
                pop     hl
__putschk:      inc     hl
                djnz    __putsloop
                ret

;
; New line
;
; Entry:  -
; Exit:   -
; Uses:   -
;
__newline:
                ld      a,13
                call    __putc
#if defined(CPM)
                ld      a,10
                call    __putc
#endif
                ret

;
; Print number to screen
;
; Entry:  HL (number)
; Exit:   -
; Uses:   AF,BC,DE
;
__putn:         ex      hl,de
                ld      hl,__buffer+1
                call    __itoa
                ld      hl,__buffer
                ld      (hl),a
                call    __puts
                ret

;
; Print boolean to screen
;
; Entry:  HL (number)
; Exit:   -
; Uses:   AF,BC,DE
;
__putb:         xor     a
                or      l
                jr      z,__putb2
                ld      hl,__putb_true
                call    __puts
                ret
__putb2:        ld      hl,__putb_false
                call    __puts
                ret
__putb_true:    db      4,"TRUE"
__putb_false:   db      5,"FALSE"

;
; Read number from keyboard
;
; Entry:  -
; Exit:   HL
; Uses:   AF,BC,DE
;
; TODO Separate input from string-to-integer functionality
;
#if defined(CPM)
__getn:         ld      a,'>'
                call    __putc
                ld      hl,6
                ld      (__buffer),hl
                ld      de,__buffer
                ld      c,10
                call    5
                ld      a,'>'
                call    __putc
                ld      hl,__buffer+1
                call    __puts
                ld      hl,__buffer+1
                ld      a,(hl)
                inc     hl
                call    __atoi
                ret
#endif

#if defined(NXT)
__getn:
                push    ix
                ld      iy, (__saved_iy)
                ;    ld      a,1
                ;   rst $18
                ;   defw    $1601
                ld a,'>'
                call __putc
                ld      de,(23633)      ; save current channel
                push    de       
                ld      de,(__win_handle)        ; set current channel to magic window
                ld      (23633), de 
                ld      de,$01c3
                ld      c,7
                exx
                ld      hl,__buffer
                ld      e,0
                ld      a,10
                exx
                rst     8
                db      $94
                pop     bc
                ld      (23633), bc 
                pop ix
                push    de
                pop de
                ld      a,e
                ld      hl,__buffer
                call    __atoi
                ret
#endif

;
; Print assertion failed message
;
; Entry:  HL Source file
;         DE Source line
; Exit:   -
; Uses:   ?
;
__assertfailed: push    de
                push    hl
                ld      hl, __assert_msg_1
                call    __puts
                pop     hl
                call    __puts
                ld      hl, __assert_msg_2
                call    __puts
                pop     hl
                call    __putn
                call    __newline
                ret
__assert_msg_1: db 24,"*** Assertion failed in "
__assert_msg_2: db 7,", line "




;
; Signed 16 bits integer to string
;
; Entry:  HL (buffer), DE (value)
; Exit:   A (length)
; Uses:   *
;
__itoa:         ld      (hl),' '
                ld      b,0
                bit     7,d                
                ex      de,hl
                jr      z,__itoa_loop1
                ex      de,hl
                ld      (hl),'-'
                push    hl
                ld      hl,0
                and     a
                sbc     hl,de
                pop     de
__itoa_loop1:   push    bc              ; mod 10 and push
                call    __div10
                pop     bc
                add     a,'0'
                push    af
                inc     b
                ld      a,h
                or      l
                jr      nz,__itoa_loop1
                ld      c,b
                ex      de,hl
__itoa_loop2:   pop     af              ; pop and store
                inc     hl
                ld      (hl),a
                djnz    __itoa_loop2
                ld      a,c
                inc     a
                ret

;
; String to signed 16 bits integer
;
; Entry:    HL (buffer), A (length)
; Exit:     DE (value)
; Uses:     *
;
; TODO Report errors via carry or a register? 
;
__atoi:         ld      de,0
                and     a
                ret     z
                ld      b,a
                ld      a,(hl)
                ld      c,a
                cp      '-'
                jr      z,__atoi_skip   ; Skip minus sign
                cp      '+'
                jr      z,__atoi_skip   ; Skip plus sign
__atoi_loop:    sub     '0'
                jr      c,__atoi_done   ; Not a digit
                cp      10
                jr      nc,__atoi_done  ; Not a digit
                push    hl
                call    __mul10
                ld      l,a
                ld      h,0
                add     hl,de
                ex      hl,de
                pop     hl
__atoi_skip:    inc     hl
                ld      a,(hl)
                djnz    __atoi_loop
__atoi_done:    ld      a,c             ; Fix sign, if necessary
                cp      '-'
                ret     nz
                and     a
                ld      hl,0
                sbc     hl,de
                ex      de,hl
                ret

#if defined(CPM)
__textfg:     ld a,l
              add a,'0'
              ld  (__textfg_str+3),a
              ld hl,__textfg_str
              call  __puts
              ret
__textfg_str: db 3,27,'T',32
#endif

#if defined(NXT)
__textfg:     ld a,l
              ld  (__textfg_str+2),a
              ld hl,__textfg_str
              call  __puts
              ret
__textfg_str: db 2,16,0 ; No good in LAYER 2,1 - needs mapping
#endif

#if defined(CPM)
__textbg:     ld a,l
              add a,'0'
              ld  (__textbg_str+3),a
              ld hl,__textbg_str
              call  __puts
              ret
__textbg_str: db 3,27,'S',32
#endif

#if defined(NXT)
__textbg:     ld a,l
              ld  (__textbg_str+2),a
              ld hl,__textbg_str
              call  __puts
              ret
__textbg_str: db 2,17,0 ; No good in LAYER 2,1 - needs mapping
#endif

#if defined(CPM)
__gotoxy:     ld a,l
              add a,31
              ld  (__gotoxy_str+4),a
              ld a,e
              add a,31
              ld  (__gotoxy_str+3),a
              ld hl,__gotoxy_str
              call  __puts
              ret
__gotoxy_str: db 4,27,'Y',32,32
#endif

#if defined(NXT)
__gotoxy:     ld a,l
              dec   a
              ld  (__gotoxy_str+3),a
              ld a,e
              dec   a
              ld  (__gotoxy_str+2),a
              ld hl,__gotoxy_str
              call  __puts
              ret
__gotoxy_str: db 3,22,0,0
#endif

#if defined(CPM)
__clrscr:     ld hl,__clrscr_str
              call  __puts
              ret
__clrscr_str: db 4,27,'H',27,'J'
#endif

#if defined(NXT)
__clrscr:     ld hl,__clrscr_str
              call  __puts
              ret
__clrscr_str: db 1,14
#endif

#if defined(CPM)
__cursor_on:  ld hl,__cur_on_str
              call  __puts
              ret
__cur_on_str: db 2,27,'e'
#endif

#if defined(NXT)
__cursor_on:  ret
#endif

#if defined(CPM)
__cursor_off: ld hl,__cur_off_str
              call  __puts
              ret
__cur_off_str: db 2,27,'f'
#endif

#if defined(NXT)
__cursor_off: ret
#endif

;
; Poke
;
; Entry:  HL (addr), E (value)
; Exit:   -
; Uses:   -
;
__poke:         ld      (hl),e
                ret


#if defined(LORES)
;
;
;
;
;
;
__pixel_addr:   sla     l
                rr      e
                rr      l
                ld      h,e
                ld      a,h
                cp      $18
                jr      c,__pixel_addr1
                ld      de,$6000
                jr      __pixel_addr2
__pixel_addr1:  ld      de,$4000
__pixel_addr2:  add     hl,de
                ret
;
; Set a pixel in low-res mode
;
; Entry:    HL  x       (0..128)
;           DE  y       (0..95)
;           BC  color   (0..255)
;
__set_pixel:    call    __pixel_addr
                ld      (hl),c
                ret

;
; Get a pixel in LAYER 2,1
;
; Entry:    HL  x       (0..255)
;           DE  y       (0..191)
;
__get_pixel:    call    __pixel_addr
                ld      l,(hl)
                ld      h,0
                ret


#endif

#if defined(HIRES)
__back_buffer:  db      18


__set_frontbuf: ld      a,l
                srl     a
                db      $ed,$92,$12
                ret

__set_backbuf:  ld      a,l
                ld      (__back_buffer),a
                srl     a
                db      $ed,$92,$13

                ret

__wait_vsync:   halt
                ret
;
; Set a pixel in LAYER 2,1
;
; Entry:    HL  x       (0..255)
;           DE  y       (0..191)
;           BC  color   (0..255)
;
__set_pixel:    di
                ld      d,e
                srl     d
                srl     d
                srl     d
                srl     d
                srl     d
                ld      a,(__back_buffer)
                add     a,d

                db      $ed,$92,$56

                ld      a,e
                and     31
                ld      h,a

                ld      de,$c000
                add     hl,de
                ld      (hl),c

                db      $ed,$91,$56,$00

                ei
                ret

;
; Get a pixel in LAYER 2,1
;
; Entry:    HL  x       (0..255)
;           DE  y       (0..191)
;
__get_pixel:    di
                ld      d,e
                srl     d
                srl     d
                srl     d
                srl     d
                srl     d
                ld      a,(__back_buffer)
                add     a,d

                db      $ed,$92,$56

                ld      a,e
                and     31
                ld      h,a

                ld      de,$c000
                add     hl,de
                ld      a,(hl)
                ld      h,0
                ld      l,a

                db      $ed,$91,$56,$00

                ei
                ret


#endif

;__peek:
;__poke:

;__border:
;__setpixel:
;__getpixel:

;
; Startup (with some help from Melissa O'Neill for NXT case)
;
; Entry: -
; Exit: -
; Uses: *
;
#if defined(CPM)
__init:         ret
#endif

#if defined(NXT)
__init:         ld      (__saved_iy),iy
                ld      de, $01d5
                ld      a,1
                exx
#if defined(LORES)
                ld      bc,$0100
#endif
#if defined(HIRES)
                ld      bc,$0201
#endif
                exx
                ld      c,7
                rst     $08
                db      $94
                exx
                ld   (__win_handle),hl
                exx
                ret
#endif

;
; Shutdown
;
; Entry: -
; Exit: -
; Uses: *
;
#if defined(CPM)
__done:         ret
#endif

#if defined(NXT)
__done:         ld      iy,(__saved_iy)
                ret
#endif
