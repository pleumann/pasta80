; ----------------------------------------------------------------------------
; PL0 built-in assembler functions
; ----------------------------------------------------------------------------

#if defined(CPM)
            org     $100
#endif

#if defined(NXT)
            org     $2000
#endif

            jp      main

__comp16:
      ld   a,h
      and  128
            jr      nz,__negm1
            bit     7,d
            ret     nz
            ld      a,h
            cp      d
            ret     nz
            ld      a,l
            cp      e
            ret
__negm1:
            xor     d
            rla
            ret     c
            ld      a,h
            cp      d
            ret     nz
            ld      a,l
            cp      e
            ret
;
; MUL10
;

__mul16:
            ld      c,l
            ld      b,h
            ld      hl,0
            ld      a,15
__mul16a:
            sla     e
            rl      d
            jr      nc,__mul16b
            add     hl,bc
__mul16b:
            add     hl,hl
            dec     a
            jr      nz,__mul16a
            or      d
            ret     p
            add     hl,bc
            ret

__sdiv16:
            ld      a,h
            ld      (__srem),a
            xor     d
            ld      (__squot),a

            ld      a,d
            or      a
            jp      p,__chkde
            sub     a
            sub     e
            ld      e,a
            sbc     a,a
            sub     d
            ld      d,a
__chkde:
            ld      a,h
            or      a
            jp      p,__dodiv
            sub     a
            sub     l
            ld      l,a
            sbc     a,a
            sub     h
            ld      h,a
__dodiv:
            call    __udiv16
            ret     c

            ld      a,(__squot)
            or      a
            jp      p,__dorem
            sub     a
            sub     l
            ld      l,a
            sbc     a,a
            sub     h
            ld      h,a
__dorem:
            ld      a,(__srem)
            or      a
            ret     p
            sub     a
            sub     e
            ld      e,a
            sbc     a,a
            sub     d
            ld      d,a
            ret

__udiv16:
            ld      a,e
            or      d
            jr      nz,__divide
            ld      hl,0
            ld      d,h
            ld      e,l
            scf
            ret
__divide:
            ld      c,l
            ld      a,h
            ld      hl,0
            ld      b,16
            or      a
__dvloop:
            rl      c
            rla
            rl      l
            rl      h
            push    hl
            sbc     hl,de
            ccf
            jr      c,__drop
            ex      (sp),hl
__drop:
            inc     sp
            inc     sp
            djnz    __dvloop

            ex      de,hl
            rl      c
            ld      l,c
            rla
            ld      h,a
            or      a
            ret

__squot:    ds      1
__srem:     ds      1
__count:    ds      1


; ------------------------------------------------------------------------------
; Multiply by 10
; ------------------------------------------------------------------------------
__mul10:    
            ex      hl,de
            add     hl,hl
            ld      de,hl
            add     hl,hl
            add     hl,hl
            add     hl,de
            ex      hl,de
            ret

;
; DIV10
;
__div10:    
            ld      bc,$0D0A
            xor     a
            add     hl,hl
            rla
            add     hl,hl
            rla
            add     hl,hl
            rla
__div10a: 
            add     hl,hl
            rla
            cp      c
            jr c,   __div10b
            sub c
            inc l
__div10b:
            djnz __div10a
            ret

#if defined(CPM)
;
; PUTC
;
__putc:
            ld      e,a
            ld      c,2
            call    5
            ret
#endif

#if defined(NXT)
;
; PUTC
;
__putc:
            ld      iy,(__saved_iy)
            rst     16
            ret
#endif

;
; PUTS
;
__puts:
            ld      b,(hl)
            inc     b
            jr      __putschk
__putsloop: ld      a,(hl)
            push    hl
            push    bc
            call    __putc
            pop     bc
            pop     hl
__putschk: inc     hl
            djnz    __putsloop
            ld      a,13
            call    __putc
#if defined(CPM)
            ld      a,10
            call    __putc
#endif
            ret

#if defined(__NXT__)
;
; PUTS
;
__puts:
     ld      a,2
     rst $18
     defw    $1601

            push    ix
            push    iy
            ld      iy,(__saved_iy)
            ld      e,(hl)
            inc     hl
            ld      de,$01c6
            ld      c,7
            rst     8
            db      $94
            ld      a,13
            rst     16
            ld      a,10
            rst     16
            pop     iy
            pop     ix
            ret
#endif
;
; PUTI
;
__putn:
            ld      a,128
            and     h
            jr      z,__putnpos
            ld      de,0
            ex      hl,de
            sbc     hl,de
            ld      a,'-'
            push    af
            jp      __putngo
__putnpos:
            ld      a,' '
            push    af
__putngo:
            ld      de,__putnbuf+6
__putnloop:
            call    __div10
            add     '0'
            ld      (de),a
            dec     de

            ld      a,h
            or      l
            jr      nz,__putnloop
            pop     af
            ld      (de),a
            ld      hl,__putnbuf+7
            and     a
            sbc     hl,de
            ld      a,l
            dec     de
            ld      (de),a
            ex      hl,de
            call    __puts
            ret
__putnbuf:
            db      0,"-32768"

#if defined(CPM)
__getn:
            ld      a,'>'
            call    __putc

            ld      de,__getnbuf
            ld      c,10
            call    5

            ld      a,'>'
            call    __putc

            ld      hl,__getnbuf+1
            call    __puts

            ld      de,0
            ld      a,(__getnbuf+1)
            cp     0
            ret     z

            ld      b,a
            ld      hl,__getnbuf+2
            ld      a,(hl)
            cp     '-'
            jr      z,__getnchk
__getnloop:
            sub     '0'
            push    hl
            call    __mul10
            ld      l,a
            ld      h,0
            add     hl,de
            ex      hl,de
            pop     hl
__getnchk:
            inc     hl
            ld      a,(hl)
            djnz    __getnloop

            ld      a,(__getnbuf+2)
            cp     '-'
            ret     nz

            xor     a
            ld      hl,0
            sbc     hl,de
            ex      hl,de

            ret

__getnbuf:
            db      10,0,"-32768"
#endif

#if defined(NXT)
__getn:
            push    ix
            ld      iy, (__saved_iy)

 ;    ld      a,1
  ;   rst $18
  ;   defw    $1601

            ld a,'>'
            call __putc

	ld      de,(23633)      ; save current channel
	push    de       
	ld      de,(_zxn_window_channel)        ; set current channel to magic window
	ld      (23633), de 

            ld      de,$01c3
            ld      c,7
            exx
            ld      hl,__getnbuf
            ld      e,0
            ld      a,10
            exx

            rst     8
            db      $94

;            ld      de,0

	pop     bc
	ld      (23633), bc 

            pop ix

            push    de
            ld a,13
            call __putc
            pop de

;            ld      hl,__GET
;            push   de
;            call    __PUTS
;            pop     de

            ; exx
            ld      a,e
            cp     0
            ret     z

            ld      de,0

;            ret

            ld      b,a
            ld      hl,__getnbuf
            ld      a,(hl)
            cp     '-'
            jr      z,__getnchk
__getnloop:
            sub     '0'
            push    hl
            call    __mul10
            ld      l,a
            ld      h,0
            add     hl,de
            ex      hl,de
            pop     hl
__getnchk:
            inc     hl
            ld      a,(hl)
            djnz    __getnloop

            ld      a,(__getnbuf)
            cp     '-'
            ret     nz

            xor     a
            ld      hl,0
            sbc     hl,de
            ex      hl,de

            ret

__getnbuf:  equ    30000
;            db      "-32768"
#endif

__display:
            ds      32

__saved_iy  ds 2

_zxn_window_channel ds 2


__init:
#if defined(NXT)
    ld      (__saved_iy),iy

;    push    af
;    push    bc
;    push    de
;    push    hl
;    push    ix

;    exx
;    push    bc
;    push    de
;    push    hl
;    exx

  ;   ld      a,2
  ;   rst $18
  ;   defw    $1601

	ld      de, $01d5
	ld      a,1
	exx
	ld      bc, $0101
	exx
	ld      c, 7
	rst     $08
	db      $94

    exx
	          ld   (_zxn_window_channel), hl      ; ggggg
	exx

;	ld      de, $01d5
;	ld      a,1
;	exx
;	ld      bc, $0102
;	exx
;	ld      c, 7
;	rst     $08
;	db      $94
;	jr      nc, err_die

;	exx
;	ld      (_zxn_window_channel), hl
;	exx
#endif
            ret

__done:
;        exx
;        pop     hl
;        pop     de
;        pop     bc
;        exx

;        pop ix
;        pop hl
;        pop de
;        pop bc
;        pop af
   
            ld      iy,(__saved_iy)
            ret

;cls     EQU $0D6B
;    opench  EQU $1601
;    print   EQU $203C
    