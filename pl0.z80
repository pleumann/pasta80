;
; PL0 built-in assembler functions
;

#if defined(CPM)
                org     $100
#endif

#if defined(NXT)
                org     $2000
#endif

                jp      main

;
; Signed 16 bit comparison (taken from Zaks)
;
; In:   HL (left), DE (right)
; Out:  CF (smaller), ZF (equal)
; Uses: A
;
__comp16:       ld      a,h
                and     128
                jr      nz,__negm1
                bit     7,d
                ret     nz
                ld      a,h
                cp      d
                ret     nz
                ld      a,l
                cp      e
                ret
__negm1:        xor     d
                rla
                ret     c
                ld      a,h
                cp      d
                ret     nz
                ld      a,l
                cp      e
                ret

;
; Signed 16 bit multiplication (taken from Leventhal/Saville)
;
; Entry:  HL (multiplicand), DE (multiplier)
; Exit:   HL (product)
; Uses:   AF, BC
;
__mul16:        ld      c,l
                ld      b,h
                ld      hl,0
                ld      a,15
__mul16a:       sla     e
                rl      d
                jr      nc,__mul16b
                add     hl,bc
__mul16b:       add     hl,hl
                dec     a
                jr      nz,__mul16a
                or      d
                ret     p
                add     hl,bc
                ret

;
; Signed 16 bit division (taken from Leventhal/Saville)
;
; Entry:  HL (dividend), DE (divisior)
; Exit:   HL (quotient), DE (remainder), CF (div-by-zero)
; Uses:   AF, BC
;
__sdiv16:       ld      a,h
                ld      (__srem),a
                xor     d
                ld      (__squot),a
                ld      a,d
                or      a
                jp      p,__chkde
                sub     a
                sub     e
                ld      e,a
                sbc     a,a
                sub     d
                ld      d,a
__chkde:        ld      a,h
                or      a
                jp      p,__dodiv
                sub     a
                sub     l
                ld      l,a
                sbc     a,a
                sub     h
                ld      h,a
__dodiv:        call    __udiv16
                ret     c
                ld      a,(__squot)
                or      a
                jp      p,__dorem
                sub     a
                sub     l
                ld      l,a
                sbc     a,a
                sub     h
                ld      h,a
__dorem:        ld      a,(__srem)
                or      a
                ret     p
                sub     a
                sub     e
                ld      e,a
                sbc     a,a
                sub     d
                ld      d,a
                ret
__udiv16:       ld      a,e
                or      d
                jr      nz,__divide
                ld      hl,0
                ld      d,h
                ld      e,l
                scf
                ret
__divide:       ld      c,l
                ld      a,h
                ld      hl,0
                ld      b,16
                or      a
__dvloop:       rl      c
                rla
                rl      l
                rl      h
                push    hl
                sbc     hl,de
                ccf
                jr      c,__drop
                ex      (sp),hl
__drop:         inc     sp
                inc     sp
                djnz    __dvloop
                ex      de,hl
                rl      c
                ld      l,c
                rla
                ld      h,a
                or      a
                ret

__squot:        ds      1
__srem:         ds      1
__count:        ds      1

;
; Multiplication by 10
;
; Entry:  HL (multiplicand)
; Exit:   HL (product)
; Uses:   DE
;
__mul10:    
                ex      hl,de
                add     hl,hl
                ld      de,hl
                add     hl,hl
                add     hl,hl
                add     hl,de
                ex      hl,de
                ret

;
; Division by 10 (taken from Z80 Heaven)
;
; Entry:  HL (dividend)
; Exit:   HL (quotient), A (remainder)
; Uses:   AF, BC
;
__div10:    
                ld      bc,$0D0A
                xor     a
                add     hl,hl
                rla
                add     hl,hl
                rla
                add     hl,hl
                rla
__div10a:       add     hl,hl
                rla
                cp      c
                jr c,   __div10b
                sub c
                inc l
__div10b:       djnz __div10a
                ret

;
; Print character to screen
;
; Entry:  A (ASCII code)
; Exit:   -
; Uses:   C,E,IY
;
#if defined(CPM)
__putc:
                ld      e,a
                ld      c,2
                call    5
                ret
#endif

#if defined(NXT)
__putc:
                ld      iy,(__saved_iy)
                rst     16
                ret
#endif

;
; Print string to screen
;
; Entry:  HL (string address)
; Exit:   -
; Uses:   AF,BC
;
__puts:         ld      b,(hl)
                inc     b
                jr      __putschk
__putsloop:     ld      a,(hl)
                push    hl
                push    bc
                call    __putc
                pop     bc
                pop     hl
__putschk:      inc     hl
                djnz    __putsloop
                ld      a,13
                call    __putc
#if defined(CPM)
                ld      a,10
                call    __putc
#endif
                ret

;
; Print number to screen
;
; Entry:  HL (number)
; Exit:   -
; Uses:   AF,BC,DE
;
__putn:         ex      hl,de
                ld      hl,__putnbuf+1
                call    __itoa
                ld      hl,__putnbuf
                ld      (hl),a
                call    __puts
                ret
__putnbuf:      db      0,"xxxxxxxxxxxxxxxx"

;
; Read number from keyboard
;
; Entry:  -
; Exit:   HL
; Uses:   AF,BC,DE
;
; TODO Separate input from string-to-integer functionality
;
#if defined(CPM)
__getn:         ld      a,'>'
                call    __putc
                ld      de,__getnbuf
                ld      c,10
                call    5
                ld      a,'>'
                call    __putc
                ld      hl,__getnbuf+1
                call    __puts
                ld      hl,__getnbuf+1
                ld      a,(hl)
                inc     hl
                call    __atoi
                ret

__getnbuf:      db      10,0,"xxxxxxxxxxxxxxx"
#endif

#if defined(NXT)
__getn:
                push    ix
                ld      iy, (__saved_iy)
                ;    ld      a,1
                ;   rst $18
                ;   defw    $1601
                ld a,'>'
                call __putc
                ld      de,(23633)      ; save current channel
                push    de       
                ld      de,(_zxn_window_channel)        ; set current channel to magic window
                ld      (23633), de 
                ld      de,$01c3
                ld      c,7
                exx
                ld      hl,__getnbuf
                ld      e,0
                ld      a,10
                exx
                rst     8
                db      $94
                pop     bc
                ld      (23633), bc 
                pop ix
                push    de
                ld a,13
                call __putc
                pop de
                ld      a,e
                ld      hl,__getnbuf
                call    __atoi
                ret

__getnbuf:      equ    30000            ; TODO Should be on the stack
#endif

;
; Signed 16 bits integer to string
;
; Entry:  HL (buffer), DE (value)
; Exit:   A (length)
; Uses:   *
;
__itoa:         ld      (hl),' '
                ld      b,0
                bit     7,d                
                ex      de,hl
                jr      z,__itoa_loop1
                ex      de,hl
                ld      (hl),'-'
                push    hl
                ld      hl,0
                and     a
                sbc     hl,de
                pop     de
__itoa_loop1:   push    bc              ; mod 10 and push
                call    __div10
                pop     bc
                add     a,'0'
                push    af
                inc     b
                ld      a,h
                or      l
                jr      nz,__itoa_loop1
                ld      c,b
                ex      de,hl
__itoa_loop2:   pop     af              ; pop and store
                inc     hl
                ld      (hl),a
                djnz    __itoa_loop2
                ld      a,c
                inc     a
                ret

;
; String to signed 16 bits integer
;
; Entry:    HL (buffer), A (length)
; Exit:     DE (value)
; Uses:     *
;
; TODO Report errors via carry or a register? 
;
__atoi:         ld      de,0
                and     a
                ret     z
                ld      b,a
                ld      a,(hl)
                ld      c,a
                cp      '-'
                jr      z,__atoi_skip   ; Skip minus sign
                cp      '+'
                jr      z,__atoi_skip   ; Skip plus sign
__atoi_loop:    sub     '0'
                jr      c,__atoi_done   ; Not a digit
                cp      10
                jr      nc,__atoi_done  ; Not a digit
                push    hl
                call    __mul10
                ld      l,a
                ld      h,0
                add     hl,de
                ex      hl,de
                pop     hl
__atoi_skip:    inc     hl
                ld      a,(hl)
                djnz    __atoi_loop
__atoi_done:    ld      a,c             ; Fix sign, if necessary
                cp      '-'
                ret     nz
                and     a
                ld      hl,0
                sbc     hl,de
                ex      de,hl
                ret

;
; Startup (with some help from Melissa O'Neill for NXT case)
;
; Entry: -
; Exit: -
; Uses: *
;
#if defined(CPM)
__init          ret
#endif

#if defined(NXT)
__init          ld      (__saved_iy),iy
                ;   ld      a,2
                ;   rst $18
                ;   defw    $1601
                ld      de, $01d5
                ld      a,1
                exx
                ld      bc, $0101
                exx
                ld      c, 7
                rst     $08
                db      $94
                exx
                ld   (_zxn_window_channel),hl
                exx
                ret

__saved_iy:     ds 2

_zxn_window_channel: ds 2
#endif

;
; Shutdown
;
; Entry: -
; Exit: -
; Uses: *
;
#if defined(CPM)
__done          ret
#endif

#if defined(NXT)
__done:
                ld      iy,(__saved_iy)
                ret
#endif

;cls     EQU $0D6B
;    opench  EQU $1601
;    print   EQU $203C
    